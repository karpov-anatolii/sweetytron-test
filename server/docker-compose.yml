version: '3.8'
services:
  # These are the configurations for our Node app
  # When Docker Compose starts this container it will automatically
  # use the Dockerfile in the directory to configure it
  app:
    build: .
    container_name: sweetytron-server
    depends_on:
      # Our app does not work without our database
      # so this ensures our database is loaded first
      - postgres
    ports:
      - '5000:5000'
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
      # Maps our current project directory `.` to
      # our working directory in the container
      #- ./:/usr/src/app/
      # node_modules workaround for volumes
      # https://stackoverflow.com/a/32785014
      #- /usr/src/app/node_modules

  # This is the configuration for our PostgreSQL database container
  # Note the `postgres` name is important, in out Node app when we refer
  # to  `host: "postgres"` that value is mapped on the network to the
  # address of this container.
  postgres:
    image: postgres:14.1-alpine
    restart: always
    environment:
      # You can set the value of environment variables
      # in your docker-compose.yml file
      # Our Node app will use these to connect
      # to the database
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=root
    ports:
      # Standard port for PostgreSQL databases
      - '5432:5432'
    volumes:
      - .:/docker-entrypoint-initdb.d
      - pgdbdata:/var/lib/postgresql/data
        # When the PostgresSQL container is started it will run any scripts
        # provided in the `docker-entrypoint-initdb.d` directory, this connects
        # our seed file to that directory so that it gets run
        #- ./database-seed.sql:/docker-entrypoint-initdb.d/database-seed.sql
volumes:
  pgdbdata: null
# version: '3'
# services:
#   postgres:
#     image: postgres:12.1
#     ports:
#       - '5432:5432'
#     environment:
#       POSTGRES_PASSWORD: 1819
#     volumes:
#       - ./postgresql/data:/var/lib/postgresql/data
#   server:
#     build:
#       context: ./server
#       dockerfile: Dockerfile.dev
#     volumes:
#       - /app/node_modules
#       - ./server/config:/app/config
#       - ./server/src:/app/src
#       - ./server/test:/app/test
#       - ./server:/app
#     ports:
#       - '5000:5000'
#   client:
#     build:
#       context: ./client
#       dockerfile: Dockerfile.dev
#     volumes:
#       - /app/node_modules
#       - ./client:/app
#     ports:
#       - '8080:8080'
